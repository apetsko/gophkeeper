// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/apetsko/gophkeeper/models"
	mock "github.com/stretchr/testify/mock"
)

// IStorage is an autogenerated mock type for the IStorage type
type IStorage struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: ctx, u
func (_m *IStorage) AddUser(ctx context.Context, u *models.UserEntry) (int, error) {
	ret := _m.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserEntry) (int, error)); ok {
		return rf(ctx, u)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserEntry) int); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.UserEntry) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with no fields
func (_m *IStorage) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserData provides a mock function with given fields: ctx, userDataID
func (_m *IStorage) DeleteUserData(ctx context.Context, userDataID int) error {
	ret := _m.Called(ctx, userDataID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, userDataID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMasterKey provides a mock function with given fields: ctx, userID
func (_m *IStorage) GetMasterKey(ctx context.Context, userID int) (*models.EncryptedMK, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMasterKey")
	}

	var r0 *models.EncryptedMK
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.EncryptedMK, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.EncryptedMK); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EncryptedMK)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, username
func (_m *IStorage) GetUser(ctx context.Context, username string) (*models.UserEntry, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *models.UserEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.UserEntry, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.UserEntry); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserData provides a mock function with given fields: ctx, userDataID
func (_m *IStorage) GetUserData(ctx context.Context, userDataID int) (*models.DBUserData, error) {
	ret := _m.Called(ctx, userDataID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserData")
	}

	var r0 *models.DBUserData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.DBUserData, error)); ok {
		return rf(ctx, userDataID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.DBUserData); ok {
		r0 = rf(ctx, userDataID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DBUserData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userDataID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDataList provides a mock function with given fields: ctx, userID
func (_m *IStorage) GetUserDataList(ctx context.Context, userID int) ([]models.UserDataListItem, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserDataList")
	}

	var r0 []models.UserDataListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]models.UserDataListItem, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.UserDataListItem); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserDataListItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveMasterKey provides a mock function with given fields: ctx, userID, encryptedMK, nonce
func (_m *IStorage) SaveMasterKey(ctx context.Context, userID int, encryptedMK []byte, nonce []byte) (int, error) {
	ret := _m.Called(ctx, userID, encryptedMK, nonce)

	if len(ret) == 0 {
		panic("no return value specified for SaveMasterKey")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []byte, []byte) (int, error)); ok {
		return rf(ctx, userID, encryptedMK, nonce)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, []byte, []byte) int); ok {
		r0 = rf(ctx, userID, encryptedMK, nonce)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, []byte, []byte) error); ok {
		r1 = rf(ctx, userID, encryptedMK, nonce)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUserData provides a mock function with given fields: ctx, userData
func (_m *IStorage) SaveUserData(ctx context.Context, userData *models.DBUserData) (int, error) {
	ret := _m.Called(ctx, userData)

	if len(ret) == 0 {
		panic("no return value specified for SaveUserData")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.DBUserData) (int, error)); ok {
		return rf(ctx, userData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.DBUserData) int); ok {
		r0 = rf(ctx, userData)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.DBUserData) error); ok {
		r1 = rf(ctx, userData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIStorage creates a new instance of IStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *IStorage {
	mock := &IStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
