// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	minio "github.com/minio/minio-go/v7"
	mock "github.com/stretchr/testify/mock"

	models "github.com/apetsko/gophkeeper/models"
)

// S3Client is an autogenerated mock type for the S3Client type
type S3Client struct {
	mock.Mock
}

// GetObject provides a mock function with given fields: ctx, objectName
func (_m *S3Client) GetObject(ctx context.Context, objectName string) ([]byte, *minio.ObjectInfo, error) {
	ret := _m.Called(ctx, objectName)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 []byte
	var r1 *minio.ObjectInfo
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, *minio.ObjectInfo, error)); ok {
		return rf(ctx, objectName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, objectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *minio.ObjectInfo); ok {
		r1 = rf(ctx, objectName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*minio.ObjectInfo)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, objectName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Upload provides a mock function with given fields: ctx, data, s3UploadData
func (_m *S3Client) Upload(ctx context.Context, data []byte, s3UploadData *models.S3UploadData) (*minio.UploadInfo, error) {
	ret := _m.Called(ctx, data, s3UploadData)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 *minio.UploadInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, *models.S3UploadData) (*minio.UploadInfo, error)); ok {
		return rf(ctx, data, s3UploadData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, *models.S3UploadData) *minio.UploadInfo); ok {
		r0 = rf(ctx, data, s3UploadData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minio.UploadInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, *models.S3UploadData) error); ok {
		r1 = rf(ctx, data, s3UploadData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewS3Client creates a new instance of S3Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewS3Client(t interface {
	mock.TestingT
	Cleanup(func())
}) *S3Client {
	mock := &S3Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
