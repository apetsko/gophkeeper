// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/apetsko/gophkeeper/models"
)

// IEnvelope is an autogenerated mock type for the IEnvelope type
type IEnvelope struct {
	mock.Mock
}

// DecryptUserData provides a mock function with given fields: ctx, userData, masterKey
func (_m *IEnvelope) DecryptUserData(ctx context.Context, userData models.DBUserData, masterKey []byte) ([]byte, error) {
	ret := _m.Called(ctx, userData, masterKey)

	if len(ret) == 0 {
		panic("no return value specified for DecryptUserData")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.DBUserData, []byte) ([]byte, error)); ok {
		return rf(ctx, userData, masterKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.DBUserData, []byte) []byte); ok {
		r0 = rf(ctx, userData, masterKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.DBUserData, []byte) error); ok {
		r1 = rf(ctx, userData, masterKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncryptUserData provides a mock function with given fields: ctx, masterKey, data
func (_m *IEnvelope) EncryptUserData(ctx context.Context, masterKey []byte, data []byte) (*models.EncryptedData, error) {
	ret := _m.Called(ctx, masterKey, data)

	if len(ret) == 0 {
		panic("no return value specified for EncryptUserData")
	}

	var r0 *models.EncryptedData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte) (*models.EncryptedData, error)); ok {
		return rf(ctx, masterKey, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte) *models.EncryptedData); ok {
		r0 = rf(ctx, masterKey, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EncryptedData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, []byte) error); ok {
		r1 = rf(ctx, masterKey, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIEnvelope creates a new instance of IEnvelope. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIEnvelope(t interface {
	mock.TestingT
	Cleanup(func())
}) *IEnvelope {
	mock := &IEnvelope{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
