// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// KeyManagerInterface is an autogenerated mock type for the KeyManagerInterface type
type KeyManagerInterface struct {
	mock.Mock
}

// GetMasterKey provides a mock function with given fields: ctx, userID
func (_m *KeyManagerInterface) GetMasterKey(ctx context.Context, userID int) ([]byte, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMasterKey")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]byte, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []byte); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrCreateMasterKey provides a mock function with given fields: ctx, userID, userPassword, userSalt
func (_m *KeyManagerInterface) GetOrCreateMasterKey(ctx context.Context, userID int, userPassword string, userSalt []byte) ([]byte, error) {
	ret := _m.Called(ctx, userID, userPassword, userSalt)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateMasterKey")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, []byte) ([]byte, error)); ok {
		return rf(ctx, userID, userPassword, userSalt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, []byte) []byte); ok {
		r0 = rf(ctx, userID, userPassword, userSalt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, []byte) error); ok {
		r1 = rf(ctx, userID, userPassword, userSalt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKeyManagerInterface creates a new instance of KeyManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeyManagerInterface {
	mock := &KeyManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
